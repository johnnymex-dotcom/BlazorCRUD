@page "/UpdateSupplier/{ID}"
@using BlazorCRUD.Shared
@inject HttpClient Http
@inject BlazorCRUD.Shared.Services.BlazorTimer BlazorTmr;

<h3>UpdateSupplier</h3>
<div>You want to update item with SupplierID: @ID</div>
<hr />
@if (supplier == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@supplier" OnValidSubmit="@doIt">
        <table width="80%" style="font-size:10px">
            <tr>
                <td>
                    <div>
                        <label>Company name</label>
                        <InputText id="companyName" @bind-Value="@supplier.CompanyName" class="form-control col-md-8"></InputText>
                    </div>
                </td>
                <td>
                    <div>
                        <label>Contact name</label>
                        <InputText id="contactName" @bind-Value="@supplier.ContactName" class="form-control col-md-8"></InputText>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <label>Contact title</label>
                        <InputText id="contactTitle" @bind-Value="@supplier.ContactTitle" class="form-control col-md-8"></InputText>
                    </div>
                </td>
                <td>
                    <div>
                        <label>Address</label>
                        <InputText id="address" @bind-Value="@supplier.Address" class="form-control col-md-8"></InputText>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <label>City</label>
                        <InputText id="city" @bind-Value="@supplier.City" class="form-control col-md-8"></InputText>
                    </div>
                </td>
                <td>
                    <div>
                        <label>Region</label>
                        <InputText id="region" @bind-Value="@supplier.Region" class="form-control col-md-8"></InputText>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <label>Postal Code</label>
                        <InputText id="postalCode" @bind-Value="@supplier.PostalCode" class="form-control col-md-8"></InputText>
                    </div>
                </td>
                <td>
                    <div>
                        <label>Country</label>
                        <InputText id="contry" @bind-Value="@supplier.Country" class="form-control col-md-8"></InputText>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <label>Phone</label>
                        <InputText id="phone" @bind-Value="@supplier.Phone" class="form-control col-md-8"></InputText>
                    </div>
                </td>
                <td>
                    <div>
                        <label>Fax</label>
                        <InputText id="fax" @bind-Value="@supplier.Fax" class="form-control col-md-8"></InputText>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <div>
                        <label>Home page</label>
                        <InputText id="homePage" @bind-Value="@supplier.HomePage" class="form-control col-md-8"></InputText>
                    </div>
                </td>

            </tr>
        </table>
        <br />
        <button class="btn-success" @onclick="doIt">Submit</button>


    </EditForm>
    <br />
    
    <div class="notificationFrame" style="@myStyle">
        @Content
    </div>
}
@code {
    [Parameter]
    public string ID { get; set; }

    public Supplier supplier { get; set; }
    public string Message { get; set; }
    //private string styleForMess { get; set; }

    private string myStyle = "visibility:hidden";
    private string Content;

    private async Task OnUpdateAsync()
    {

        var t = await Http.PutAsJsonAsync<Supplier>("/api/Suppliers/" + supplier.SupplierID, supplier);
        //Message = t.StatusCode.ToString();
    }

    protected override async Task OnInitializedAsync()
    {

        supplier = await Http.GetFromJsonAsync<Supplier>("api/Suppliers/" + ID);

    }

    private void failedSubmit()
    {
        // Message = "Failed....";
    }


    private async Task doIt()
    {
        var t = await Http.PutAsJsonAsync<Supplier>("/api/Suppliers/" + supplier.SupplierID, supplier);
        if (t.IsSuccessStatusCode)
        {
            showMessage ("The supplier updated OK.....");

        }

    }

    private void showMessage(string message)
    {
        myStyle = "visibility:visible";
        Content = message;
        BlazorTmr.SetTimer(1500);
        BlazorTmr.OnElapsed += MessageDone;
    }

    private void MessageDone()
    {
        myStyle = "visibility:hidden";
        Content = "";
        StateHasChanged();
    }





}
